{"version":3,"sources":["fonts/manrope-regular.ttf","fonts/manrope-extrabold.ttf","ReactotronConfig.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Reactotron","configure","connect","console","warn","log","disableYellowBox","Header","Layout","calc","x","y","window","innerWidth","innerHeight","trans","trans2","App","useSpring","xy","config","mass","tension","friction","parallax","setParallax","slideFadeIn","duration","easing","quadOut","opacity","marginTop","from","delay","className","onMouseMove","clientX","clientY","div","style","p","transform","interpolate","h1","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,6C,oBCA3CD,EAAOC,QAAU,IAA0B,+C,8GCE3CC,IACGC,YACAC,UAEHC,QAAQC,KAAOJ,IAAWK,IAC1BF,QAAQE,IAAML,IAAWK,IACzBF,QAAQG,kBAAmB,E,0BCEnBC,E,OAAWC,EAAXD,OAEFE,EAAO,SAACC,EAAGC,GAAJ,MAAU,CAACD,EAAIE,OAAOC,WAAa,EAAGF,EAAIC,OAAOE,YAAc,IACtEC,EAAQ,SAACL,EAAGC,GAAJ,4BAA0BD,EAAI,GAA9B,eAAyCC,EAAI,GAA7C,WACRK,EAAS,SAACN,EAAGC,GAAJ,4BAA0BD,EAAI,EAAI,GAAlC,cAA4CC,EAAI,EAAI,IAApD,UA8CAM,MA5Cf,WAAgB,IAAD,EACmBC,aAAU,iBAAO,CAC/CC,GAAI,CAAC,EAAG,GACRC,OAAQ,CACNC,KAAM,GACNC,QAAS,IACTC,SAAU,SAND,mBACNC,EADM,KACIC,EADJ,KASPC,EAAcR,YAAU,CAC5BE,OAAQ,CACNO,SAAU,IACVC,OAAQC,KAEVC,QAAS,EACTC,UAAW,EACXC,KAAM,CACJF,QAAS,EACTC,WAAY,KAEdE,MAAO,SAQT,OACE,yBAAKC,UAAU,MAAMC,YANH,SAAC,GAAD,IACTzB,EADS,EAClB0B,QACSzB,EAFS,EAElB0B,QAFkB,OAGdZ,EAAY,CAAEN,GAAIV,EAAKC,EAAGC,OAI5B,kBAACJ,EAAD,CAAQ2B,UAAU,cAChB,kBAAC,IAAEI,IAAH,CAAOJ,UAAU,kBAAkBK,MAAOb,GACxC,kBAAC,IAAEc,EAAH,CAAKN,UAAU,WAAWK,MAAO,CAAEE,UAAWjB,EAASL,GAAGuB,YAAY1B,KAAtE,sBAGA,kBAAC,IAAE2B,GAAH,CAAMT,UAAU,QAAQK,MAAO,CAAEE,UAAWjB,EAASL,GAAGuB,YAAY3B,KAApE,4BCvCU6B,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2D,cCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.925fb43f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/manrope-regular.f9736c4c.ttf\";","module.exports = __webpack_public_path__ + \"static/media/manrope-extrabold.5c850b42.ttf\";","import Reactotron from 'reactotron-react-js';\n\nReactotron\n  .configure()\n  .connect();\n\nconsole.warn = Reactotron.log;\nconsole.log = Reactotron.log;\nconsole.disableYellowBox = true;\n","import './ReactotronConfig';\nimport React from 'react';\nimport './App.css';\n\n// Anim\nimport { useSpring, animated as a } from 'react-spring';\nimport { quadOut } from 'd3-ease/src/quad';\n\n// UI\nimport { Layout } from 'antd';\nconst { Header } = Layout;\n\nconst calc = (x, y) => [x - window.innerWidth / 2, y - window.innerHeight / 2];\nconst trans = (x, y) => `translate3d(${ x / 10 }px, ${ y / 10 }px, 0)`;\nconst trans2 = (x, y) => `translate3d(${ x / 8 + 35 }px,${ y / 8 - 230 }px,0)`;\n\nfunction App() {\n  const [parallax, setParallax] = useSpring(() => ({\n    xy: [0, 0],\n    config: {\n      mass: 10,\n      tension: 550,\n      friction: 140\n    }\n  }));\n  const slideFadeIn = useSpring({\n    config: {\n      duration: 500,\n      easing: quadOut\n    },\n    opacity: 1,\n    marginTop: 0,\n    from: {\n      opacity: 0,\n      marginTop: -100\n    },\n    delay: '1200'\n  });\n\n  const onMouseMove = ({\n    clientX: x,\n    clientY: y\n  }) => setParallax({ xy: calc(x, y)});\n\n  return (\n    <div className='App' onMouseMove={onMouseMove}>\n      <Header className=\"App-header\">\n        <a.div className='container-title' style={slideFadeIn}>\n          <a.p className='subtitle' style={{ transform: parallax.xy.interpolate(trans2)}}>\n            GET FAR OR GO HOME\n          </a.p>\n          <a.h1 className='title' style={{ transform: parallax.xy.interpolate(trans)}}>\n            THREE STRIKES VISION\n          </a.h1>\n        </a.div>\n      </Header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './fonts/manrope-regular.ttf';\nimport './fonts/manrope-extrabold.ttf';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}